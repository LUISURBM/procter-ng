{
    "sourceFile": "src/app/component/planning/planning.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1635767450990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1635767468435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { HttpClient } from '@angular/common/http';\r\n import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n import { FormArray, FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\n-import { NgbPanelChangeEvent } from '@ng-bootstrap/ng-bootstrap';\r\n+\r\n import { ToastService } from '../toast/toast.service';\r\n import { keymessage } from 'src/app/shared/validation-msg';\r\n import { ProcterValidator } from '../reject/procter-validator';\r\n import { take } from 'rxjs/operators';\r\n"
                },
                {
                    "date": 1635771982257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n \r\n @Component({\r\n \tselector: 'app-planning-basic',\r\n \ttemplateUrl: 'planning.component.html',\r\n+\tstyleUrls: ['./planning.component.scss']\r\n })\r\n export class PlanningComponent implements OnInit {\r\n \tplanning: any[] = [];\r\n \tgroup: FormGroup;\r\n@@ -20,9 +21,9 @@\n \t\tthis.group = builder.group({\r\n \t\t\tplannings: builder.array([]),\r\n \t\t});\r\n \r\n-\t\tthis.http.get(environment.procter_api+'api/planning').pipe(take(1)).subscribe({\r\n+\t\tthis.http.get(environment.procter_api + 'api/planning').pipe(take(1)).subscribe({\r\n \t\t\tnext: (resp: any[]) => {\r\n \t\t\t\tconsole.log(resp);\r\n \t\t\t\tresp.forEach(p => this.plannings.push(this.builder.group({ ...this.addPlan(p) })));\r\n \t\t\t\tthis.planning = resp.map(o => { return { ...o, enabled: true, delivery: o.delivery.map(d => { return { ...d, inView: false, invoice: d.invoice.map(i => { return { ...i, inView: undefined }; }) }; }) }; });\r\n@@ -35,9 +36,9 @@\n \t\tthis.plannings.valueChanges.subscribe({\r\n \t\t\tnext: (v) => {\r\n \t\t\t\tthis.messages = new Array<Array<any>>(this.planning.length);\r\n \t\t\t\tconsole.log(this.plannings.controls)\r\n-\t\t\t\tthis.plannings.controls.forEach((k: FormGroup,i: number) => {\r\n+\t\t\t\tthis.plannings.controls.forEach((k: FormGroup, i: number) => {\r\n \t\t\t\t\tthis.messages[i] = [];\r\n \t\t\t\t\tObject.keys(k.controls).forEach((l) => {\r\n \t\t\t\t\t\tif (!k.controls[l].touched || k.controls[l].pristine || !k.controls[l].errors) return;\r\n \t\t\t\t\t\tObject.keys(k.controls[l].errors).forEach(e => {\r\n@@ -62,10 +63,10 @@\n \t\t\tdrivercc: this.builder.control(undefined, [Validators.required, ProcterValidator.cedula]),\r\n \t\t\tdrivername: this.builder.control(undefined, [Validators.required]),\r\n \t\t}\r\n \t}\r\n-\taddPlan(p:any) {\r\n-\t\tif(!p) return {};\r\n+\taddPlan(p: any) {\r\n+\t\tif (!p) return {};\r\n \t\treturn {\r\n \t\t\tloadorderid: this.builder.control(p.loadorderid, [Validators.required]),\r\n \t\t\tlicenseplate: this.builder.control(p.licenseplate, [Validators.required, ProcterValidator.placa]),\r\n \t\t\tdrivercc: this.builder.control(p.drivercc, [Validators.required, ProcterValidator.cedula]),\r\n@@ -74,27 +75,27 @@\n \t}\r\n \tget plannings() {\r\n \t\treturn this.group.controls.plannings as FormArray;\r\n \t}\r\n-\t\r\n \r\n+\r\n \tsave(plan, i) {\r\n-\t\tthis.http.put(environment.procter_api+'api/planning/' + plan.loadid, { ...plan, ...this.group.value.plannings[i], delivery: undefined }).subscribe({\r\n+\t\tthis.http.put(environment.procter_api + 'api/planning/' + plan.loadid, { ...plan, ...this.group.value.plannings[i], delivery: undefined }).subscribe({\r\n \t\t\tnext: (resp: any) => {\r\n-\t\t\t\tif(resp.success)\r\n+\t\t\t\tif (resp.success)\r\n \t\t\t\t\tthis.toastService.show('Guardado OK!', { classname: 'bg-success text-light', delay: 15000 });\r\n \t\t\t}\r\n \t\t});\r\n \t}\r\n-\tchangeStatus(p:number){\r\n+\tchangeStatus(p: number) {\r\n \t\tconst status = +this.planning[p].reg_status;\r\n-\t\tthis.planning[p].reg_status = status === 0 || (status > 3)? 1 : (status+1);\r\n+\t\tthis.planning[p].reg_status = status === 0 || (status > 3) ? 1 : (status + 1);\r\n \t}\r\n-\trechazar(p:number){\r\n+\trechazar(p: number) {\r\n \t\tthis.planning[p].reg_status = 2;\r\n \t\tthis.save(this.planning[p], p);\r\n \t}\r\n-\taprobar(p:number){\r\n+\taprobar(p: number) {\r\n \t\tthis.planning[p].reg_status = 1;\r\n \t\tthis.save(this.planning[p], p);\r\n \t}\r\n \tclear(control, group) {\r\n"
                },
                {
                    "date": 1635773364922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \t\tthis.http.get(environment.procter_api + 'api/planning').pipe(take(1)).subscribe({\r\n \t\t\tnext: (resp: any[]) => {\r\n \t\t\t\tconsole.log(resp);\r\n \t\t\t\tresp.forEach(p => this.plannings.push(this.builder.group({ ...this.addPlan(p) })));\r\n-\t\t\t\tthis.planning = resp.map(o => { return { ...o, enabled: true, delivery: o.delivery.map(d => { return { ...d, inView: false, invoice: d.invoice.map(i => { return { ...i, inView: undefined }; }) }; }) }; });\r\n+\t\t\t\tthis.planning = resp.map(o => { return { ...o, enabled: true, inView: false, delivery: o.delivery.map(d => { return { ...d, inView: false, invoice: d.invoice.map(i => { return { ...i, inView: undefined }; }) }; }) }; });\r\n \t\t\t\t// this.group.patchValue({ plannings: this.planning })\r\n \t\t\t}\r\n \t\t});\r\n \t}\r\n"
                },
                {
                    "date": 1635860309300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n \tsave(plan, i) {\r\n \t\tthis.http.put(environment.procter_api + 'api/planning/' + plan.loadid, { ...plan, ...this.group.value.plannings[i], delivery: undefined }).subscribe({\r\n \t\t\tnext: (resp: any) => {\r\n \t\t\t\tif (resp.success)\r\n-\t\t\t\t\tthis.toastService.show('Guardado OK!', { classname: 'bg-success text-light', delay: 15000 });\r\n+\t\t\t\t\tthis.toastService.show('Guardado OK!', { classname: 'bg-success text-light', delay: 2000 });\r\n \t\t\t}\r\n \t\t});\r\n \t}\r\n \tchangeStatus(p: number) {\r\n"
                }
            ],
            "date": 1635767450990,
            "name": "Commit-0",
            "content": "import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { NgbPanelChangeEvent } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ToastService } from '../toast/toast.service';\r\nimport { keymessage } from 'src/app/shared/validation-msg';\r\nimport { ProcterValidator } from '../reject/procter-validator';\r\nimport { take } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n\tselector: 'app-planning-basic',\r\n\ttemplateUrl: 'planning.component.html',\r\n})\r\nexport class PlanningComponent implements OnInit {\r\n\tplanning: any[] = [];\r\n\tgroup: FormGroup;\r\n\tmessages: any[][];\r\n\tconstructor(private http: HttpClient, public builder: FormBuilder, public toastService: ToastService) {\r\n\t\tthis.group = builder.group({\r\n\t\t\tplannings: builder.array([]),\r\n\t\t});\r\n\r\n\t\tthis.http.get(environment.procter_api+'api/planning').pipe(take(1)).subscribe({\r\n\t\t\tnext: (resp: any[]) => {\r\n\t\t\t\tconsole.log(resp);\r\n\t\t\t\tresp.forEach(p => this.plannings.push(this.builder.group({ ...this.addPlan(p) })));\r\n\t\t\t\tthis.planning = resp.map(o => { return { ...o, enabled: true, delivery: o.delivery.map(d => { return { ...d, inView: false, invoice: d.invoice.map(i => { return { ...i, inView: undefined }; }) }; }) }; });\r\n\t\t\t\t// this.group.patchValue({ plannings: this.planning })\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.plannings.valueChanges.subscribe({\r\n\t\t\tnext: (v) => {\r\n\t\t\t\tthis.messages = new Array<Array<any>>(this.planning.length);\r\n\t\t\t\tconsole.log(this.plannings.controls)\r\n\t\t\t\tthis.plannings.controls.forEach((k: FormGroup,i: number) => {\r\n\t\t\t\t\tthis.messages[i] = [];\r\n\t\t\t\t\tObject.keys(k.controls).forEach((l) => {\r\n\t\t\t\t\t\tif (!k.controls[l].touched || k.controls[l].pristine || !k.controls[l].errors) return;\r\n\t\t\t\t\t\tObject.keys(k.controls[l].errors).forEach(e => {\r\n\t\t\t\t\t\t\tswitch (`${e}`) {\r\n\t\t\t\t\t\t\t\tcase 'required':\r\n\t\t\t\t\t\t\t\t\tthis.messages[i].push({ message: `${keymessage[l]} es obligatorio` }); break;\r\n\t\t\t\t\t\t\t\tcase 'procter-validation':\r\n\t\t\t\t\t\t\t\t\tthis.messages[i].push({ message: `${keymessage[l]} ${k.controls[l].errors['procter-validation']}` }); break;\r\n\t\t\t\t\t\t\t\tdefault: break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tget nuevoPlan() {\r\n\t\treturn {\r\n\t\t\tloadorderid: this.builder.control(undefined, [Validators.required]),\r\n\t\t\tlicenseplate: this.builder.control(undefined, [Validators.required, ProcterValidator.placa]),\r\n\t\t\tdrivercc: this.builder.control(undefined, [Validators.required, ProcterValidator.cedula]),\r\n\t\t\tdrivername: this.builder.control(undefined, [Validators.required]),\r\n\t\t}\r\n\t}\r\n\taddPlan(p:any) {\r\n\t\tif(!p) return {};\r\n\t\treturn {\r\n\t\t\tloadorderid: this.builder.control(p.loadorderid, [Validators.required]),\r\n\t\t\tlicenseplate: this.builder.control(p.licenseplate, [Validators.required, ProcterValidator.placa]),\r\n\t\t\tdrivercc: this.builder.control(p.drivercc, [Validators.required, ProcterValidator.cedula]),\r\n\t\t\tdrivername: this.builder.control(p.drivername, [Validators.required]),\r\n\t\t}\r\n\t}\r\n\tget plannings() {\r\n\t\treturn this.group.controls.plannings as FormArray;\r\n\t}\r\n\t\r\n\r\n\tsave(plan, i) {\r\n\t\tthis.http.put(environment.procter_api+'api/planning/' + plan.loadid, { ...plan, ...this.group.value.plannings[i], delivery: undefined }).subscribe({\r\n\t\t\tnext: (resp: any) => {\r\n\t\t\t\tif(resp.success)\r\n\t\t\t\t\tthis.toastService.show('Guardado OK!', { classname: 'bg-success text-light', delay: 15000 });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tchangeStatus(p:number){\r\n\t\tconst status = +this.planning[p].reg_status;\r\n\t\tthis.planning[p].reg_status = status === 0 || (status > 3)? 1 : (status+1);\r\n\t}\r\n\trechazar(p:number){\r\n\t\tthis.planning[p].reg_status = 2;\r\n\t\tthis.save(this.planning[p], p);\r\n\t}\r\n\taprobar(p:number){\r\n\t\tthis.planning[p].reg_status = 1;\r\n\t\tthis.save(this.planning[p], p);\r\n\t}\r\n\tclear(control, group) {\r\n\t\t(this.plannings.controls[group] as FormGroup).controls[control].reset()\r\n\t}\r\n\r\n}\r\n"
        }
    ]
}