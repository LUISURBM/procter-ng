{
    "sourceFile": "src/app/component/accesory/accessory.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1635767450988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1635767450988,
            "name": "Commit-0",
            "content": "import { formatDate } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { take } from 'rxjs/operators';\r\nimport { BundleService } from 'src/app/bundle.service';\r\nimport { keymessage } from 'src/app/shared/validation-msg';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ProcterValidator } from '../reject/procter-validator';\r\nimport { ToastService } from '../toast/toast.service';\r\n\r\n\r\n@Component({\r\n\tselector: 'app-accessory-basic',\r\n\ttemplateUrl: 'accessory.component.html'\r\n})\r\nexport class AccessoryComponent implements OnInit {\r\n\tplanning: any[] = [];\r\n\tinvoice: any[] = [];\r\n\tmessages: any[];\r\n\tgroup: FormGroup;\r\n\taccessory: FormGroup;\r\n\tminDate: Date = new Date();\r\n\tmaxDate: Date = new Date();\r\n\r\n\tconstructor(private http: HttpClient, builder: FormBuilder, public toastService: ToastService, public bundleSrv: BundleService) {\r\n\t\tthis.group = builder.group({\r\n\t\t\tloadorderid: new FormControl(null, Validators.required),\r\n\t\t\tloadid: new FormControl(null, Validators.required),\r\n\t\t\tdeliveryid: new FormControl(null, Validators.required),\r\n\t\t});\r\n\t\tthis.accessory = builder.group({\r\n\t\t\t// rejecttype: new FormControl(null, Validators.required),\r\n\t\t\taccessorytype: new FormControl(null, Validators.required),\r\n\t\t\tsalesunit: new FormControl(null, Validators.required),\r\n\t\t\tquantity: new FormControl(null, Validators.required),\r\n\t\t\trequesteddate: new FormControl(formatDate(this.maxDate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n\t\t\tcostoverrun: new FormControl(null, Validators.required),\r\n\t\t\tcomentarios: new FormControl(null)\r\n\t\t});\r\n\r\n\t\thttp.get(environment.procter_api + 'api/planning')\r\n\t\t\t.pipe(\r\n\t\t\t\ttake(1)\r\n\t\t\t)\r\n\t\t\t.subscribe({\r\n\t\t\t\tnext: (resp: any[]) => {\r\n\t\t\t\t\tthis.planning = resp;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\thttp.get(environment.procter_api + 'api/accessory')\r\n\t\t\t.pipe(\r\n\t\t\t\ttake(1)\r\n\t\t\t)\r\n\t\t\t.subscribe({\r\n\t\t\t\tnext: (resp: any[]) => {\r\n\t\t\t\t\tthis.invoice = resp;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\r\n\r\n\tngOnInit(): void {\r\n\r\n\r\n\t\tthis.accessory.valueChanges.subscribe({\r\n\t\t\tnext: (v) => {\r\n\t\t\t\tconsole.log(this.accessory)\r\n\t\t\t\tif (!this.accessory.invalid && !this.accessory.touched) return;\r\n\t\t\t\tthis.messages = [];\r\n\t\t\t\tObject.keys(this.accessory.controls).forEach(k => {\r\n\t\t\t\t\tif (!this.accessory.controls[`${k}`].errors) return;\r\n\t\t\t\t\tObject.keys(this.accessory.controls[`${k}`].errors).forEach(l => {\r\n\t\t\t\t\t\tif (this.accessory.controls[`${k}`].touched && this.accessory.controls[`${k}`].errors[`${l}`]) {\r\n\t\t\t\t\t\t\tswitch (`${l}`) {\r\n\t\t\t\t\t\t\t\tcase 'required':\r\n\t\t\t\t\t\t\t\t\tthis.messages.push({ message: `${keymessage[k]} es obligatorio` }); break;\r\n\t\t\t\t\t\t\t\tcase 'procter-validation':\r\n\t\t\t\t\t\t\t\t\tthis.messages.push({ message: `${k} ${l['procter-validation']}` }); break;\r\n\t\t\t\t\t\t\t\tdefault: break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tget plannings() {\r\n\t\treturn this.group.controls.plannings as FormArray;\r\n\t}\r\n\t\r\n\r\n\tsave() {\r\n\t\tif (!this.accessory.valid) return;\r\n\t\tthis.http.post(environment.procter_api + 'api/accessory/', { ...this.group.value, ...this.accessory.value }).subscribe({\r\n\t\t\tnext: (resp: any) => {\r\n\t\t\t\tthis.toastService.show(resp, { classname: 'bg-danger text-light', delay: 15000 });\r\n\t\t\t},\r\n\t\t\terror: (error: any) => {\r\n\t\t\t\terror.error.forEach(e => this.toastService.show(e.error, { classname: 'bg-danger text-light', delay: 15000 }));\r\n\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tdisabled = false;\r\n\r\n\tselectedLoadOrderId() {\r\n\t\tconst selectedorder = this.planning.filter(p => p.loadorderid == `${this.group.value.loadorderid}`);\r\n\t\treturn selectedorder && selectedorder.length > 0 ? selectedorder[0] : undefined;\r\n\t}\r\n\tselectedLoadId() {\r\n\t\t// TO-DO: 1-1 loadid-loadorderid ?\r\n\t\tconst selectedLoad = this.planning.filter(p => p.loadid == `${this.group.value.loadid}`);\r\n\t\treturn selectedLoad && selectedLoad.length > 0 ? selectedLoad[0] : undefined;\r\n\t}\r\n\tselecteddeliveryId() {\r\n\t\t// TO-DO: 1-1 loadid-loadorderid ?\r\n\t\tconst selecteddelivery = this.planning.length == 0 ? this.planning : this.planning.reduce((s, p) => s.concat(p.delivery.filter(d => d.deliveryid == `${this.group.value.deliveryid}`)), []);\r\n\t\treturn selecteddelivery && selecteddelivery.length > 0 ? selecteddelivery[0] : undefined;\r\n\t}\r\n\r\n\tselectedLoadOrderIdbydeliveryid() {\r\n\t\tconst selectedorder = this.planning.filter(p => p.delivery.filter(d => d.deliveryid === this.selecteddeliveryId().deliveryid).length > 0);\r\n\t\treturn selectedorder && selectedorder.length > 0 ? selectedorder[0] : undefined;\r\n\t}\r\n\tloadorderid() {\r\n\t\tif (this.invoice.filter(p => p.loadorderid == `${this.group.value.loadorderid}`).length == 0)\r\n\t\t\tthis.group.patchValue({ loadorderid: undefined });\r\n\t}\r\n\tloadid() {\r\n\t\tif (!this.selectedLoadId()) {\r\n\t\t\tthis.group.patchValue({ loadid: undefined });\r\n\t\t} else {\r\n\t\t\tthis.group.patchValue({ loadorderid: this.selectedLoadId().loadorderid });\r\n\t\t}\r\n\t}\r\n\tdeliveryid() {\r\n\t\tif (!this.selecteddeliveryId()) {\r\n\t\t\tthis.group.patchValue({ deliveryid: undefined });\r\n\t\t} else {\r\n\t\t\tthis.group.patchValue({ loadorderid: this.selectedLoadOrderIdbydeliveryid().loadorderid, loadid: this.selectedLoadOrderIdbydeliveryid().loadid });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tplanningdatabyloadid() {\r\n\t\treturn this.selectedLoadOrderId() ? [this.selectedLoadOrderId().loadid] : this.planning.map(p => p.loadid);\r\n\t}\r\n\tdeliverdatabyloadid() {\r\n\t\treturn this.selectedLoadOrderId() ? this.selectedLoadOrderId().delivery : this.planning.length < 1 ? this.planning : this.planning.reduce((s, p) => s.concat(p.delivery), []);\r\n\t}\r\n\r\n\trequesteddate() {\r\n\t\tif (this.group.value.requesteddate && new Date(this.group.value.requesteddate) > new Date())\r\n\t\t\tthis.group.patchValue({ requesteddate: undefined });\r\n\r\n\t}\r\n}\r\n"
        }
    ]
}