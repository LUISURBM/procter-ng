{
    "sourceFile": "src/app/component/return/returns.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1635767028347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1635851474122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,105 @@\n-import { formatDate } from '@angular/common';\r\n import { HttpClient } from '@angular/common/http';\r\n import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\n-import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n-import { Router } from '@angular/router';\r\n+import { FormArray, FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\n+\r\n+import { ToastService } from '../toast/toast.service';\r\n+import { keymessage } from 'src/app/shared/validation-msg';\r\n+import { ProcterValidator } from '../reject/procter-validator';\r\n import { take } from 'rxjs/operators';\r\n-import { BundleService } from 'src/app/bundle.service';\r\n-import { returnsCfg } from './returns';\r\n-import { ProcterValidator } from '../reject/procter-validator';\r\n-import { ToastService } from '../toast/toast.service';\r\n+import { environment } from 'src/environments/environment';\r\n \r\n @Component({\r\n \tselector: 'app-returns-basic',\r\n \ttemplateUrl: 'returns.component.html',\r\n \tstyleUrls: ['./returns.component.scss']\r\n })\r\n export class ReturnsComponent implements OnInit {\r\n-\treturns: any[];\r\n-\r\n-\tloading = true;\r\n-\tminDate: Date = new Date();\r\n-\tmaxDate: Date = new Date();\r\n+\treturn: any[] = [];\r\n \tgroup: FormGroup;\r\n-\treport: any;\r\n-\tconstructor(private builder: FormBuilder, private http: HttpClient, public toastService: ToastService, public bundleSrv: BundleService,\r\n-\r\n-\t\tprivate router: Router) {\r\n+\tmessages: any[][];\r\n+\tconstructor(private http: HttpClient, public builder: FormBuilder, public toastService: ToastService) {\r\n \t\tthis.group = builder.group({\r\n-\t\t\tfechainicio: new FormControl(formatDate(this.maxDate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n-\t\t\tfechafin: new FormControl(formatDate(this.maxDate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n-\t\t})\r\n-\t\tthis.minDate.setFullYear(new Date().getFullYear() - 1);\r\n+\t\t\treturns: builder.array([]),\r\n+\t\t});\r\n \r\n-\r\n+\t\tthis.http.get(environment.procter_api + 'api/return').pipe(take(1)).subscribe({\r\n+\t\t\tnext: (resp: any[]) => {\r\n+\t\t\t\tconsole.log(resp);\r\n+\t\t\t\tresp.forEach(p => this.returns.push(this.builder.group({ ...this.addPlan(p) })));\r\n+\t\t\t\tthis.return = resp.map(o => { return { ...o, enabled: true, inView: false, delivery: o.delivery.map(d => { return { ...d, inView: false, invoice: d.invoice.map(i => { return { ...i, inView: undefined }; }) }; }) }; });\r\n+\t\t\t\t// this.group.patchValue({ returns: this.return })\r\n+\t\t\t}\r\n+\t\t});\r\n \t}\r\n \r\n \tngOnInit(): void {\r\n-\t\tif (this.group.valid)\r\n-\t\t\tthis.group.valueChanges.subscribe({\r\n-\t\t\t\tnext: (v) => {\r\n-\t\t\t\t\tthis.loading = true;\r\n-\t\t\t\t\tthis.http.get('http://localhost:8000/api/report/returns/' + this.group.value.fechainicio + \"/\" + this.group.value.fechafin)\r\n-\t\t\t\t\t\t.pipe(take(1))\r\n-\t\t\t\t\t\t.subscribe({\r\n-\t\t\t\t\t\t\tnext: (resp: any[]) => {\r\n-\t\t\t\t\t\t\t\tthis.loading = false;\r\n-\t\t\t\t\t\t\t\tconsole.log(resp)\r\n-\t\t\t\t\t\t\t\tthis.report = { ...returnsCfg, dataSource: { data: resp! } };\r\n-\t\t\t\t\t\t\t\tthis.returns = resp;\r\n+\t\tthis.returns.valueChanges.subscribe({\r\n+\t\t\tnext: (v) => {\r\n+\t\t\t\tthis.messages = new Array<Array<any>>(this.return.length);\r\n+\t\t\t\tconsole.log(this.returns.controls)\r\n+\t\t\t\tthis.returns.controls.forEach((k: FormGroup, i: number) => {\r\n+\t\t\t\t\tthis.messages[i] = [];\r\n+\t\t\t\t\tObject.keys(k.controls).forEach((l) => {\r\n+\t\t\t\t\t\tif (!k.controls[l].touched || k.controls[l].pristine || !k.controls[l].errors) return;\r\n+\t\t\t\t\t\tObject.keys(k.controls[l].errors).forEach(e => {\r\n+\t\t\t\t\t\t\tswitch (`${e}`) {\r\n+\t\t\t\t\t\t\t\tcase 'required':\r\n+\t\t\t\t\t\t\t\t\tthis.messages[i].push({ message: `${keymessage[l]} es obligatorio` }); break;\r\n+\t\t\t\t\t\t\t\tcase 'procter-validation':\r\n+\t\t\t\t\t\t\t\t\tthis.messages[i].push({ message: `${keymessage[l]} ${k.controls[l].errors['procter-validation']}` }); break;\r\n+\t\t\t\t\t\t\t\tdefault: break;\r\n \t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t});\r\n-\t\t\t\t\tthis.loading = false;\r\n-\r\n-\t\t\t\t}\r\n-\t\t\t})\r\n-\r\n+\t\t\t\t\t})\r\n+\t\t\t\t})\r\n+\t\t\t}\r\n+\t\t})\r\n \t}\r\n \r\n-\tclear(control) {\r\n-\t\tthis.group.reset();\r\n+\tget nuevoPlan() {\r\n+\t\treturn {\r\n+\t\t\tloadorderid: this.builder.control(undefined, [Validators.required]),\r\n+\t\t\tlicenseplate: this.builder.control(undefined, [Validators.required, ProcterValidator.placa]),\r\n+\t\t\tdrivercc: this.builder.control(undefined, [Validators.required, ProcterValidator.cedula]),\r\n+\t\t\tdrivername: this.builder.control(undefined, [Validators.required]),\r\n+\t\t}\r\n \t}\r\n+\taddPlan(p: any) {\r\n+\t\tif (!p) return {};\r\n+\t\treturn {\r\n+\t\t\tloadorderid: this.builder.control(p.loadorderid, [Validators.required]),\r\n+\t\t\tlicenseplate: this.builder.control(p.licenseplate, [Validators.required, ProcterValidator.placa]),\r\n+\t\t\tdrivercc: this.builder.control(p.drivercc, [Validators.required, ProcterValidator.cedula]),\r\n+\t\t\tdrivername: this.builder.control(p.drivername, [Validators.required]),\r\n+\t\t}\r\n+\t}\r\n+\tget returns() {\r\n+\t\treturn this.group.controls.returns as FormArray;\r\n+\t}\r\n \r\n-\tfechainicio() {\r\n-\t\tif (this.group.value.fechainicio && new Date(this.group.value.fechainicio) > new Date())\r\n-\t\t\tthis.group.patchValue({ fechainicio: undefined });\r\n \r\n+\tsave(plan, i) {\r\n+\t\tthis.http.put(environment.procter_api + 'api/return/' + plan.loadid, { ...plan, ...this.group.value.returns[i], delivery: undefined }).subscribe({\r\n+\t\t\tnext: (resp: any) => {\r\n+\t\t\t\tif (resp.success)\r\n+\t\t\t\t\tthis.toastService.show('Guardado OK!', { classname: 'bg-success text-light', delay: 15000 });\r\n+\t\t\t}\r\n+\t\t});\r\n \t}\r\n-\tfechafin() {\r\n-\t\tif (this.group.value.fechafin && new Date(this.group.value.fechafin) > new Date())\r\n-\t\t\tthis.group.patchValue({ fechafin: undefined });\r\n-\r\n+\tchangeStatus(p: number) {\r\n+\t\tconst status = +this.return[p].reg_status;\r\n+\t\tthis.return[p].reg_status = status === 0 || (status > 3) ? 1 : (status + 1);\r\n \t}\r\n+\trechazar(p: number) {\r\n+\t\tthis.return[p].reg_status = 2;\r\n+\t\tthis.save(this.return[p], p);\r\n+\t}\r\n+\taprobar(p: number) {\r\n+\t\tthis.return[p].reg_status = 1;\r\n+\t\tthis.save(this.return[p], p);\r\n+\t}\r\n+\tclear(control, group) {\r\n+\t\t(this.returns.controls[group] as FormGroup).controls[control].reset()\r\n+\t}\r\n \r\n-\tver() {\r\n-\t\tthis.router.navigate(['/component/return', {}]);\r\n-\t}\r\n }\r\n"
                },
                {
                    "date": 1635852609069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { keymessage } from 'src/app/shared/validation-msg';\r\n import { ProcterValidator } from '../reject/procter-validator';\r\n import { take } from 'rxjs/operators';\r\n import { environment } from 'src/environments/environment';\r\n+import { formatDate } from '@angular/common';\r\n \r\n @Component({\r\n \tselector: 'app-returns-basic',\r\n \ttemplateUrl: 'returns.component.html',\r\n@@ -16,18 +17,20 @@\n export class ReturnsComponent implements OnInit {\r\n \treturn: any[] = [];\r\n \tgroup: FormGroup;\r\n \tmessages: any[][];\r\n+\tminDate: Date = new Date();\r\n+\tmaxDate: Date = new Date();\r\n \tconstructor(private http: HttpClient, public builder: FormBuilder, public toastService: ToastService) {\r\n \t\tthis.group = builder.group({\r\n \t\t\treturns: builder.array([]),\r\n \t\t});\r\n \r\n \t\tthis.http.get(environment.procter_api + 'api/return').pipe(take(1)).subscribe({\r\n \t\t\tnext: (resp: any[]) => {\r\n \t\t\t\tconsole.log(resp);\r\n-\t\t\t\tresp.forEach(p => this.returns.push(this.builder.group({ ...this.addPlan(p) })));\r\n-\t\t\t\tthis.return = resp.map(o => { return { ...o, enabled: true, inView: false, delivery: o.delivery.map(d => { return { ...d, inView: false, invoice: d.invoice.map(i => { return { ...i, inView: undefined }; }) }; }) }; });\r\n+\t\t\t\tresp.forEach(p => this.returns.push(this.builder.group({ ...this.addDevolucion(p) })));\r\n+\t\t\t\tthis.return = resp.map(o => { return { ...o, enabled: true, inView: false, product: o.product.map(d => { return { ...d, inView: false }; }) }; });\r\n \t\t\t\t// this.group.patchValue({ returns: this.return })\r\n \t\t\t}\r\n \t\t});\r\n \t}\r\n@@ -55,32 +58,37 @@\n \t\t\t}\r\n \t\t})\r\n \t}\r\n \r\n-\tget nuevoPlan() {\r\n+\tfecharechazo() {\r\n+\t\tif (this.group.value.fechainicio && new Date(this.group.value.fechainicio) > new Date())\r\n+\t\t\tthis.group.patchValue({ fechainicio: undefined });\r\n+\r\n+\t}\r\n+\t\r\n+\tget nuevaDevolucion() {\r\n \t\treturn {\r\n \t\t\tloadorderid: this.builder.control(undefined, [Validators.required]),\r\n \t\t\tlicenseplate: this.builder.control(undefined, [Validators.required, ProcterValidator.placa]),\r\n \t\t\tdrivercc: this.builder.control(undefined, [Validators.required, ProcterValidator.cedula]),\r\n-\t\t\tdrivername: this.builder.control(undefined, [Validators.required]),\r\n+\t\t\tpickupdate: new FormControl(formatDate(this.maxDate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n \t\t}\r\n \t}\r\n-\taddPlan(p: any) {\r\n+\taddDevolucion(p: any) {\r\n \t\tif (!p) return {};\r\n \t\treturn {\r\n-\t\t\tloadorderid: this.builder.control(p.loadorderid, [Validators.required]),\r\n-\t\t\tlicenseplate: this.builder.control(p.licenseplate, [Validators.required, ProcterValidator.placa]),\r\n-\t\t\tdrivercc: this.builder.control(p.drivercc, [Validators.required, ProcterValidator.cedula]),\r\n-\t\t\tdrivername: this.builder.control(p.drivername, [Validators.required]),\r\n+\t\t\tpickupreason: this.builder.control(undefined, [Validators.required]),\r\n+\t\t\treg_status: this.builder.control(p.drivercc, [Validators.required, ProcterValidator.cedula]),\r\n+\t\t\tpickupdate: new FormControl(formatDate(p.pickupdate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n \t\t}\r\n \t}\r\n \tget returns() {\r\n \t\treturn this.group.controls.returns as FormArray;\r\n \t}\r\n \r\n \r\n-\tsave(plan, i) {\r\n-\t\tthis.http.put(environment.procter_api + 'api/return/' + plan.loadid, { ...plan, ...this.group.value.returns[i], delivery: undefined }).subscribe({\r\n+\tsave(devolucion, i) {\r\n+\t\tthis.http.put(environment.procter_api + 'api/return/' + devolucion.returnid, { ...devolucion, ...this.group.value.returns[i], product: undefined }).subscribe({\r\n \t\t\tnext: (resp: any) => {\r\n \t\t\t\tif (resp.success)\r\n \t\t\t\t\tthis.toastService.show('Guardado OK!', { classname: 'bg-success text-light', delay: 15000 });\r\n \t\t\t}\r\n"
                },
                {
                    "date": 1635853146558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import { ProcterValidator } from '../reject/procter-validator';\r\n import { take } from 'rxjs/operators';\r\n import { environment } from 'src/environments/environment';\r\n import { formatDate } from '@angular/common';\r\n+import { BundleService } from 'src/app/bundle.service';\r\n \r\n @Component({\r\n \tselector: 'app-returns-basic',\r\n \ttemplateUrl: 'returns.component.html',\r\n@@ -19,9 +20,9 @@\n \tgroup: FormGroup;\r\n \tmessages: any[][];\r\n \tminDate: Date = new Date();\r\n \tmaxDate: Date = new Date();\r\n-\tconstructor(private http: HttpClient, public builder: FormBuilder, public toastService: ToastService) {\r\n+\tconstructor(private http: HttpClient, public builder: FormBuilder, public toastService: ToastService, public bundleSrv: BundleService) {\r\n \t\tthis.group = builder.group({\r\n \t\t\treturns: builder.array([]),\r\n \t\t});\r\n \r\n"
                },
                {
                    "date": 1635858102135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,18 +67,18 @@\n \t}\r\n \t\r\n \tget nuevaDevolucion() {\r\n \t\treturn {\r\n-\t\t\tloadorderid: this.builder.control(undefined, [Validators.required]),\r\n-\t\t\tlicenseplate: this.builder.control(undefined, [Validators.required, ProcterValidator.placa]),\r\n-\t\t\tdrivercc: this.builder.control(undefined, [Validators.required, ProcterValidator.cedula]),\r\n+\t\t\tpickupreason: this.builder.control(undefined, [Validators.required]),\r\n+\t\t\treg_status: this.builder.control(undefined, [Validators.required]),\r\n \t\t\tpickupdate: new FormControl(formatDate(this.maxDate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n \t\t}\r\n \t}\r\n \taddDevolucion(p: any) {\r\n \t\tif (!p) return {};\r\n \t\treturn {\r\n \t\t\tpickupreason: this.builder.control(undefined, [Validators.required]),\r\n+\t\t\treturnid: this.builder.control(p.returnid, [Validators.required]),\r\n \t\t\treg_status: this.builder.control(p.drivercc, [Validators.required, ProcterValidator.cedula]),\r\n \t\t\tpickupdate: new FormControl(formatDate(p.pickupdate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n \t\t}\r\n \t}\r\n"
                },
                {
                    "date": 1635858485490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n \t\tif (!p) return {};\r\n \t\treturn {\r\n \t\t\tpickupreason: this.builder.control(undefined, [Validators.required]),\r\n \t\t\treturnid: this.builder.control(p.returnid, [Validators.required]),\r\n-\t\t\treg_status: this.builder.control(p.drivercc, [Validators.required, ProcterValidator.cedula]),\r\n+\t\t\treg_status: this.builder.control(p.drivercc, [Validators.required]),\r\n \t\t\tpickupdate: new FormControl(formatDate(p.pickupdate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n \t\t}\r\n \t}\r\n \tget returns() {\r\n"
                }
            ],
            "date": 1635767028347,
            "name": "Commit-0",
            "content": "import { formatDate } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { BundleService } from 'src/app/bundle.service';\r\nimport { returnsCfg } from './returns';\r\nimport { ProcterValidator } from '../reject/procter-validator';\r\nimport { ToastService } from '../toast/toast.service';\r\n\r\n@Component({\r\n\tselector: 'app-returns-basic',\r\n\ttemplateUrl: 'returns.component.html',\r\n\tstyleUrls: ['./returns.component.scss']\r\n})\r\nexport class ReturnsComponent implements OnInit {\r\n\treturns: any[];\r\n\r\n\tloading = true;\r\n\tminDate: Date = new Date();\r\n\tmaxDate: Date = new Date();\r\n\tgroup: FormGroup;\r\n\treport: any;\r\n\tconstructor(private builder: FormBuilder, private http: HttpClient, public toastService: ToastService, public bundleSrv: BundleService,\r\n\r\n\t\tprivate router: Router) {\r\n\t\tthis.group = builder.group({\r\n\t\t\tfechainicio: new FormControl(formatDate(this.maxDate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n\t\t\tfechafin: new FormControl(formatDate(this.maxDate, 'yyyy-MM-ddTHH:mm', 'es-Co'), [Validators.required, ProcterValidator.maxDateToday]),\r\n\t\t})\r\n\t\tthis.minDate.setFullYear(new Date().getFullYear() - 1);\r\n\r\n\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tif (this.group.valid)\r\n\t\t\tthis.group.valueChanges.subscribe({\r\n\t\t\t\tnext: (v) => {\r\n\t\t\t\t\tthis.loading = true;\r\n\t\t\t\t\tthis.http.get('http://localhost:8000/api/report/returns/' + this.group.value.fechainicio + \"/\" + this.group.value.fechafin)\r\n\t\t\t\t\t\t.pipe(take(1))\r\n\t\t\t\t\t\t.subscribe({\r\n\t\t\t\t\t\t\tnext: (resp: any[]) => {\r\n\t\t\t\t\t\t\t\tthis.loading = false;\r\n\t\t\t\t\t\t\t\tconsole.log(resp)\r\n\t\t\t\t\t\t\t\tthis.report = { ...returnsCfg, dataSource: { data: resp! } };\r\n\t\t\t\t\t\t\t\tthis.returns = resp;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tthis.loading = false;\r\n\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\tclear(control) {\r\n\t\tthis.group.reset();\r\n\t}\r\n\r\n\tfechainicio() {\r\n\t\tif (this.group.value.fechainicio && new Date(this.group.value.fechainicio) > new Date())\r\n\t\t\tthis.group.patchValue({ fechainicio: undefined });\r\n\r\n\t}\r\n\tfechafin() {\r\n\t\tif (this.group.value.fechafin && new Date(this.group.value.fechafin) > new Date())\r\n\t\t\tthis.group.patchValue({ fechafin: undefined });\r\n\r\n\t}\r\n\r\n\tver() {\r\n\t\tthis.router.navigate(['/component/return', {}]);\r\n\t}\r\n}\r\n"
        }
    ]
}